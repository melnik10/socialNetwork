{"version":3,"sources":["components/Content/Profile/ProfileInfo/ProfileInfo.module.css","components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","components/Content/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Content/Profile/ProfileInfo/ProfileDataForm.tsx","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","components/Content/Profile/MyPosts/Post/Post.tsx","components/Content/Profile/MyPosts/MyPostForm.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/MyPosts/MyPostsContainer.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","editMode","setEditMode","useState","status","setStatus","dispatch","useDispatch","toggleEditMode","updateStatusProfileThunkCreator","useEffect","autoFocus","onBlur","onChange","e","currentTarget","value","onDoubleClick","ReduxProfileDataForm","reduxForm","form","onSubmit","handleSubmit","Field","name","type","validate","required","component","Input","placeholder","Textarea","className","s","contacts","contactsTitle","Object","keys","profile","map","key","index","keyContacts","contactsItems","createField","undefined","error","s2","formSummaryError","ProfileData","profileInfo","isOwner","onClick","activateEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","entries","i","Contact","contactTitle","contactValue","openUrl","contactsLink","ProfileInfo","useSelector","state","profilePage","auth","userId","isAuth","Preloader","profilePhoto","alt","src","photos","large","userPhoto","defaultValue","target","files","length","Array","from","updateProfilePhotoThunkCreator","String","onMainPhotoChanged","datatype","initialValues","async","updateProfileDataThunkCreator","formData","Post","item","message","likesCount","maxlength10","maxLength","MyPosts","postsElements","posts","p","id","postsBlock","addPostBlock","data","addPost","postText","reset","MyPostsMemo","React","memo","MyPostsContainer","connect","Profile","ProfileContainer","history","useHistory","authUserId","useParams","userIdNum","Number","push","getUserProfileThunkCreator","getStatusProfileThunkCreator","to"],"mappings":"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","file":"static/js/3.92397845.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__YSjBd\",\"profileImage\":\"ProfileInfo_profileImage__2dBBy\",\"profilePhoto\":\"ProfileInfo_profilePhoto__3uTyF\",\"profileInfo\":\"ProfileInfo_profileInfo__27G7W\",\"contacts\":\"ProfileInfo_contacts__1P14f\",\"contactsTitle\":\"ProfileInfo_contactsTitle__1L1ZA\",\"contactsItems\":\"ProfileInfo_contactsItems__1_flt\",\"contactsLink\":\"ProfileInfo_contactsLink__2Lo8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2zq-8\",\"addPostBlock\":\"MyPosts_addPostBlock__3fMPS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2mPem\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {updateStatusProfileThunkCreator} from \"../../../../../redux/reducers/profile_reducer\";\n\ntype PropsType = {\n    status: any\n}\n\nexport const ProfileStatusWithHooks: FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n    const dispatch = useDispatch()\n    const toggleEditMode = () => {\n        if(editMode) {\n            setEditMode(false)\n            dispatch(updateStatusProfileThunkCreator(status))\n        }\n        else {\n            setEditMode(true);\n        }\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n      <>\n          {\n              !editMode ?\n                <div>\n                    <span onDoubleClick={toggleEditMode}>{props.status || '-----'}</span>\n                </div> :\n                <div>\n                    <input autoFocus={true} onBlur={toggleEditMode} onChange={onStatusChange} value={status}/>\n                </div>\n          }\n      </>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import React, {FC} from 'react'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../../common/FieldComponents/FieldComponents\";\nimport s from \"./ProfileInfo.module.css\";\nimport s2 from '../../../common/FieldComponents/FieldComponents.module.css'\n\nimport {required} from \"../../../../redux/utilities/validators\";\nimport {ContactsType, ProfileType} from \"../../../../types/types\";\n\n// const maxlength40 = maxLength(40);\ntype ProfileDataFormType = {\n    // initialValues: ProfileType & ContactsType\n    profile: ProfileType\n    // contacts: ContactsType\n    onSubmit: any\n}\nexport const ProfileDataForm: FC<ProfileDataFormType & InjectedFormProps<{}, ProfileDataFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <div><b>Full name:</b></div>\n                <Field name={'fullName'} type={'text'} validate={[required]} component={Input}\n                       placeholder='Input your name...'/>\n            </div>\n            <div>\n                <div><b>About me:</b></div>\n                <Field name={'aboutMe'} component={Textarea} validate={[required]} type='text'/></div>\n            <div>\n                <div><b>Do you look for a job?</b></div>\n                <Field name={'lookingForAJob'} component={Input} type='checkbox'/></div>\n            <div>\n                <div><b>Professional skills: </b></div>\n                <Field name={'lookingForAJobDescription'} validate={[required]} component={Textarea} type='text'/>\n            </div>\n            <div className={s.contacts}>\n                <div className={s.contactsTitle}><b>Contacts:</b></div>\n                {Object.keys(props.profile.contacts).map((key, index) => {\n                    const keyContacts = 'contacts.' + key\n                    return (<div className={s.contactsItems}>\n                        <div><b>{key}:</b></div>\n                        <div>\n                            {/*{// todo: create some solution for embedded object}*/}\n                            {createField<ContactsTypeKeys>(undefined, keyContacts as ContactsTypeKeys, [], Input,)}\n                        </div>\n                    </div>)})\n                }\n            </div>\n\n            {/*{props.error && <div className={s.formSummaryError}>*/}\n            {/*    {props.error}*/}\n            {/*</div>}*/}\n            <div>\n                <button onSubmit={() => {\n\n                }} type={'submit'}>Save\n                </button>\n            </div>\n            {\n                props.error && <div className={s2.formSummaryError}>\n                    {props.error}\n                </div>\n            }\n        </form>\n    )\n}\n\ntype PropEventSource<Type> = `contacts.${string & keyof Type}`\ntype ContactsTypeKeys = PropEventSource<ContactsType>\n\n\n\nexport const ReduxProfileDataForm = reduxForm<{}, ProfileDataFormType>({form: 'profileData'})(ProfileDataForm)\n\nexport default ReduxProfileDataForm;\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../../assets/images/user.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\nimport ReduxProfileDataForm from \"./ProfileDataForm\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux_store\";\r\nimport {\r\n    openUrl,\r\n    updateProfileDataThunkCreator,\r\n    updateProfilePhotoThunkCreator,\r\n    updateStatusProfileThunkCreator\r\n} from \"../../../../redux/reducers/profile_reducer\";\r\n\r\nconst ProfileInfo: FC<ProfilePropsType> = (props) => {\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n    const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n    const authUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n    const openUrl = () => dispatch(openUrl)\r\n    const updateStatus = () => dispatch(updateStatusProfileThunkCreator)\r\n    let [editMode, activateEditMode] = useState(false);\r\n    if (!profile) {\r\n        return (\r\n            <Preloader/>\r\n        )\r\n    }\r\n    const onMainPhotoChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            const files = Array.from(e.target.files)\r\n            dispatch(updateProfilePhotoThunkCreator(String(files[0])))\r\n            e.target.value = '';\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType) => {\r\n        // todo : remove then\r\n        await dispatch(updateProfileDataThunkCreator(formData))\r\n        activateEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.profile}>\r\n                <div className={s.profilePhoto}>\r\n                    <img alt={'userPhotoLarge'} src={profile?.photos.large || userPhoto}/>\r\n                    <div>\r\n                        {props.isOwner ?\r\n                            <input defaultValue={''} onChange={e => onMainPhotoChanged(e)} datatype={''}\r\n                                   type='file'/> : ''}\r\n                    </div>\r\n                    <ProfileStatusWithHooks status={status}/>\r\n                </div>\r\n                {editMode ? <ReduxProfileDataForm initialValues={{...profile, ...profile?.contacts}}\r\n                                                  profile={profile} onSubmit={onSubmit} {...props}/> :\r\n                    <ProfileData activateEditMode={() => activateEditMode(true)} profile={profile} {...props}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n    profile: ProfileType & { aboutMe: string }\r\n}\r\nconst ProfileData: FC<ProfileDataProps> = (props) => {\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            {props.isOwner ? <button onClick={props.activateEditMode}>Edit</button> : ''}\r\n            <div><span>My name</span>: {props.profile.fullName}</div>\r\n            <div><span>About me</span>: {props.profile.aboutMe}</div>\r\n            <div><span>Looking for a job:</span> {props.profile.lookingForAJob ? 'yes' : \"no\"}</div>\r\n            <div><span>My professional skills:</span> {props.profile.lookingForAJobDescription}</div>\r\n            <div><b>Contacts:</b></div>\r\n            {Object.entries(props.profile.contacts).map(([key, value], i) =>\r\n                <Contact key={i} contactTitle={key}\r\n                         contactValue={value}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\ntype ContactProps = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact: FC<ContactProps> = ({contactTitle, contactValue, ...props}) => {\r\n  const dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            { contactValue ?\r\n                <div className={s.contactsItems} onClick={() => dispatch(openUrl(contactValue))}>\r\n                    <b>{contactTitle}: </b>\r\n                    <span className={s.contactsLink}>{contactValue}</span>\r\n                </div>\r\n                : ''\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React, {FC} from 'react';\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst Post:FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img alt={'postAvatar'} src=\"https://eugeneronin.com/wp-content/uploads/2010/01/avatar.jpg\"></img>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                {props.likesCount} like\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {InjectedFormProps, reduxForm} from \"redux-form\";\nimport React, {FC} from \"react\";\nimport {createField, Textarea} from \"../../../common/FieldComponents/FieldComponents\";\nimport {maxLength, required} from \"../../../../redux/utilities/validators\";\n\nconst maxlength10 = maxLength(10);\n\nexport type AddPostFormPropsType = {\n    postText: string\n}\n\ntype AddPostFormPropsTypeKeys = Extract<keyof AddPostFormPropsType, string>\n\nexport const AddPostForm:FC<{} & InjectedFormProps<AddPostFormPropsType, {}>> = (props) => {\n    return (\n      <form onSubmit={props.handleSubmit}>\n          <div>\n              {createField<AddPostFormPropsTypeKeys>('Enter text...', 'postText', [required, maxlength10], Textarea)}\n          </div>\n          <div>\n              <button type={'submit'}>Add post</button>\n              <button type={'reset'}>Remove post</button>\n          </div>\n      </form>\n    )\n}\n\nexport default reduxForm<AddPostFormPropsType, {}>({form: 'addPost',})(AddPostForm);\n\n","import React, {FC} from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport ReduxAddPostForm, {AddPostFormPropsType} from \"./MyPostForm\";\r\nimport {InitialStateProfileType} from \"../../../../redux/reducers/profile_reducer\";\r\nimport { reset } from 'redux-form';\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateProfileType\r\n    addPost: (postText: string) => void\r\n    reset: typeof reset\r\n}\r\nconst MyPosts: FC<MyPostsPropsType> = props => {\r\n\r\n    let postsElements = props.profilePage.posts.map(p => <Post key={p.id} message={p.message}\r\n                                                               likesCount={p.likesCount}/>)\r\n    const onAddPost = (data: AddPostFormPropsType) => {\r\n        props.addPost(data.postText);\r\n        props.reset('addPost');\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div className={s.addPostBlock}>\r\n                <ReduxAddPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            {postsElements}\r\n        </div>\r\n    )\r\n}\r\n\r\n//MEMO NOT WORKING\r\n// const areEqual = (prevProps: MyPostsPropsType, nextProps: MyPostsPropsType) => {\r\n//     return prevProps != nextProps;\r\n// }\r\n\r\nconst MyPostsMemo = React.memo(MyPosts)\r\n\r\n\r\nexport default MyPostsMemo;","import {InitialStateProfileType, addPost} from \"../../../../redux/reducers/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\"\r\nimport {connect} from \"react-redux\";\r\nimport {reset} from \"redux-form\";\r\nimport {AppStateType} from \"../../../../redux/redux_store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateProfileType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    reset: typeof reset\r\n    addPost: typeof addPost\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {reset, addPost})(MyPosts)\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n    editMode: boolean\r\n}\r\n\r\nconst Profile: FC<ProfilePropsType> = (props) => {\r\n    return (\r\n      <div className={s.profile}>\r\n          <ProfileInfo\r\n                       isOwner={props.isOwner}\r\n                       editMode={props.editMode}\r\n          />\r\n          <MyPostsContainer/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {FC, useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {\r\n    getStatusProfileThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    ProfileThunkType\r\n} from \"../../../redux/reducers/profile_reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, RouteComponentProps, useHistory, useParams} from \"react-router-dom\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {AppStateType} from \"../../../redux/redux_store\";\r\n\r\nconst ProfileContainer: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const authUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n    let { userId } = useParams<{userId? : string}>()\r\n    let userIdNum : number | null  = Number(userId)\r\n\r\n    const refreshProfile = () => {\r\n        if (!userIdNum) {\r\n            userIdNum = authUserId\r\n            if (!authUserId) {\r\n                history.push('/login');\r\n            }\r\n        }\r\n        if (userIdNum) {\r\n            dispatch(getUserProfileThunkCreator(userIdNum))\r\n            dispatch(getStatusProfileThunkCreator(userIdNum))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [userIdNum])\r\n\r\n    if (isAuth || userIdNum) {\r\n        return (\r\n            <Profile\r\n                     isOwner={!userIdNum}\r\n                     editMode={true}\r\n            />\r\n        )\r\n    } else {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n}\r\n\r\nexport default ProfileContainer\r\n"],"sourceRoot":""}