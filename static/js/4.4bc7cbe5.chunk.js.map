{"version":3,"sources":["components/Content/Dialogs/Dialogs.module.css","components/Content/Dialogs/Message/Message.module.css","components/Content/Dialogs/DialogsItem/DialogsItem.module.css","components/Content/Dialogs/Message/Message.tsx","components/Content/Dialogs/DialogsItem/DialogsItem.tsx","components/Content/Dialogs/Message/AddMessageForm.tsx","components/Content/Dialogs/Dialogs.tsx","redux/hoc/withAuthRedirect.tsx","components/Content/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","cssClassMessage","from","s","sentMessage","receivedMessage","className","avatarMessage","alt","src","avatar","message","DialogsItem","path","id","dialog","to","name","maxlength50","maxLength","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","messagesElements","messageInput","createField","required","Textarea","sendMessageButton","type","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","ind","messages","m","messagesElement","dialogsItems","dataMessage","sendMessage","textMessage","reset","mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restProps","DialogsContainer","compose"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,iBAAmB,kCAAkC,aAAe,8BAA8B,kBAAoB,qC,oBCA/TD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,gBAAkB,mC,oBCAjKD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,8B,+GC4BjDC,MAlBgBC,IAE3B,IAAIC,EAMJ,OAJIA,EADe,IAAfD,EAAME,KACYC,IAAEC,YAEFD,IAAEE,gBAGtB,sBAAKC,UAAWL,EAAhB,UACI,qBAAKK,UAAWH,IAAEI,cAAeC,IAAK,gBAAiBC,IAAKT,EAAMU,SAClE,sBAAMJ,UAAWH,IAAEQ,QAAnB,SACKX,EAAMW,c,0BCLNC,MAToBZ,IAC/B,IAAIa,EAAO,YAAcb,EAAMc,GAC/B,OACE,qBAAKR,UAAS,UAAKH,IAAEY,QAArB,SACI,cAAC,IAAD,CAASC,GAAIH,EAAb,SAAoBb,EAAMiB,U,yBCGpC,MAAMC,EAAcC,YAAU,IAefC,MADaC,YAAyC,CAACC,KAAM,eAAhDD,EAb8DrB,GAElF,sBAAMuB,SAAUvB,EAAMwB,aAAtB,SACI,sBAAKlB,UAAWH,IAAEsB,iBAAlB,UACI,sBAAMnB,UAAWH,IAAEuB,aAAnB,SACKC,YAAoC,mBAAoB,cAAe,CAACC,IAAUV,GAAcW,OAErG,wBAAQvB,UAAWH,IAAE2B,kBAAmBC,KAAM,SAA9C,iCCoBDC,MA7BiBhC,IAC5B,IAAIiC,EAAkBjC,EAAMkC,YAAYC,QAAQC,KAAI,CAACC,EAAGC,IAAQ,cAAC,EAAD,CAAuBrB,KAAMoB,EAAEpB,KAAMH,GAAIuB,EAAEvB,IAAzBwB,KAC9Eb,EAAmBzB,EAAMkC,YAAYK,SAASH,KAAI,CAACI,EAAGF,IAAQ,cAAC,EAAD,CAAmBhC,UAAWH,IAAEsC,gBACvB9B,QAAS6B,EAAE7B,QACXT,KAAMsC,EAAEtC,KAAMc,GAAIwB,EAAExB,GACpBN,OAAQ8B,EAAE9B,QAHL4B,KAUhF,OACI,sBAAKhC,UAAWH,IAAEgC,QAAlB,UACI,qBAAK7B,UAAWH,IAAEuC,aAAlB,SACKT,IAEL,sBAAK3B,UAAWH,IAAEoC,SAAlB,UACKd,EACD,8BACI,cAAC,EAAD,CAAqBF,SAbhBoB,IACjB3C,EAAM4C,YAAYD,EAAYE,aAC9B7C,EAAM8C,MAAM,2B,QClBpB,IAAIC,EAA2BC,IACpB,CACHC,OAAQD,EAAME,KAAKD,SAsBZE,MAdR,SAA+BC,GAUlC,OAD8BC,YAA6CN,EAA7CM,EARNrD,IACpB,IAAI,OAACiD,KAAWK,GAAatD,EAC7B,OAAIiD,EAGG,cAACG,EAAD,IAAsBE,IAFlB,cAAC,IAAD,CAAUtC,GAAI,e,gBCGjC,MAAMuC,EAAmBC,YACvBH,aANqBL,IACZ,CACHd,YAAac,EAAMd,eAIiE,CAACY,UAAMF,kBACjGO,EAFuBK,CAELxB,GACLuB","file":"static/js/4.4bc7cbe5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1dEYO\",\"dialogsItems\":\"Dialogs_dialogsItems__3M47K\",\"dialog\":\"Dialogs_dialog__Lpne5\",\"active\":\"Dialogs_active__t2gBP\",\"messages\":\"Dialogs_messages__1jCn3\",\"messagesElements\":\"Dialogs_messagesElements__3PjB_\",\"messageInput\":\"Dialogs_messageInput__3vGT0\",\"sendMessageButton\":\"Dialogs_sendMessageButton__3Bg4E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1j5kn\",\"avatarMessage\":\"Message_avatarMessage__UBcJ8\",\"sentMessage\":\"Message_sentMessage__32XTX\",\"receivedMessage\":\"Message_receivedMessage__1aZSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__2POq4\",\"active\":\"DialogsItem_active__mKwh_\"};","import React, {FC} from 'react';\r\nimport s from \"./Message.module.css\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    from: number\r\n    to: number\r\n    avatar: string\r\n    className: string\r\n}\r\n\r\nconst Message:FC<PropsType> = (props) => {\r\n\r\n    let cssClassMessage;\r\n    if (props.from === 0) {\r\n        cssClassMessage = s.sentMessage;\r\n    } else {\r\n        cssClassMessage = s.receivedMessage;\r\n    }\r\n    return (\r\n      <div className={cssClassMessage}>\r\n          <img className={s.avatarMessage} alt={'avatarMessage'} src={props.avatar}/>\r\n          <span className={s.message}>\r\n              {props.message}\r\n          </span>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport s from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogsItem:FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n      <div className={`${s.dialog}`}>\r\n          <NavLink to={path}>{props.name}</NavLink>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default DialogsItem;","import s from \"../Dialogs.module.css\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport React, {FC} from \"react\";\nimport {createField, Textarea} from \"../../../common/FieldComponents/FieldComponents\";\nimport {maxLength, required} from \"../../../../redux/utilities/validators\";\n\ntype PropsType = {}\n\ntype AddMessageFormType = {\n    textMessage: string\n}\ntype AddMessageFormTypeKeys = Extract<keyof AddMessageFormType, string>\n\n\n\n\nconst maxlength50 = maxLength(50);\nconst AddMessageForm: FC<PropsType & InjectedFormProps<AddMessageFormType, PropsType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.messagesElements}>\n                <span className={s.messageInput}>\n                    {createField<AddMessageFormTypeKeys>('Input message...', 'textMessage', [required, maxlength50], Textarea)}\n                </span>\n                <button className={s.sendMessageButton} type={'submit'}>Send message</button>\n            </div>\n        </form>\n    )\n}\n\nconst ReduxAddMessageForm = reduxForm<AddMessageFormType, PropsType>({form: 'messageForm'})(AddMessageForm);\nexport default ReduxAddMessageForm;","import React from 'react';\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\"\r\nimport ReduxAddMessageForm from \"./Message/AddMessageForm\";\r\nimport {FC} from \"react\";\r\nimport {InitialStateDialogsType} from \"../../../redux/reducers/dialogs_reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n    sendMessage: (dataMessage: any) => void\r\n    reset: (form: string) => void\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d, ind) => <DialogsItem key={ind} name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map((m, ind) => <Message key={ind} className={s.messagesElement}\r\n                                                                               message={m.message}\r\n                                                                               from={m.from} to={m.to}\r\n                                                                               avatar={m.avatar}/>)\r\n\r\n    const sendMessage = (dataMessage: any) => {\r\n        props.sendMessage(dataMessage.textMessage);\r\n        props.reset('messageForm')\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <ReduxAddMessageForm onSubmit={sendMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux_store\";\n\n\nlet mapStateToPropsRedirect = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth,\n    }\n}\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent : React.ComponentType<WCP>) {\n    let WrapperContainer = (props: MapPropsType) => {\n        let {isAuth, ...restProps} = props\n        if(!isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <WrappedComponent {...restProps as WCP}/>\n    }\n\n    let WrapperContainerConnect = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsRedirect)(WrapperContainer)\n    return WrapperContainerConnect;\n}\n\n\nexport default withAuthRedirect;","import {InitialStateDialogsType, sendMessage} from \"../../../redux/reducers/dialogs_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport withAuthRedirect from \"../../../redux/hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {reset} from \"redux-form\";\r\nimport {AppStateType} from \"../../../redux/redux_store\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    reset: typeof reset\r\n    sendMessage: typeof sendMessage\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    };\r\n}\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n  connect<MapStateToPropsType,MapDispatchToPropsType, null , AppStateType>(mapStateToProps, {reset,sendMessage}),\r\n  withAuthRedirect)(Dialogs)\r\nexport default DialogsContainer;"],"sourceRoot":""}